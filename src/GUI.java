import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import Chronotimer.Console;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author dishenwen
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    Console con;
    SwingWorker runningDisplay;
    //Thread tN;
    //Runnable rN;
    boolean numSwitch = false;
    boolean DNFFlag = false;
    boolean PARDNFFlag = false;
    boolean timeGet = false;//used so we can know when time is being entered;
    int count1 = 0;//used to keep track of numbers being entered for time;
    int count2 = 0;

    
   //Constructor 
    public GUI(Console con) {
        this.con=con;
        initComponents();
        setVisible(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        JPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        //set backGround
        jPanel3.setOpaque(true);
        jPanel3.setBackground(Color.getHSBColor((float) 1.56, (float) 1, 100));
        JPanel1.setBackground(Color.getHSBColor((float) 1.56, (float) 1, 100));
        jPanel2.setBackground(Color.getHSBColor((float) 1.56, (float) 1, 100));
       
       
        //
        //KeyBinding
        InputMap im=JPanel1.getInputMap(JPanel1.WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = JPanel1.getActionMap();
        
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), "RightArrow");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), "LeftArrow");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), "UpArrow");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), "DownArrow");

        //add KeyPad 
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_0,0), "Zero");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_1,0), "One");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_2,0), "Two");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_3,0), "Three");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_4,0), "Four");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_5,0), "Five");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_6,0), "Six");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_7,0), "Seven");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_8,0), "Eight");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_9,0), "Nine");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN, java.awt.event.InputEvent.SHIFT_DOWN_MASK), "#");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ASTERISK ,java.awt.event.InputEvent.SHIFT_DOWN_MASK), "*");
        //
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_F,0), "Function");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "Swap");
        
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q,0), "Power");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_P,0), "PrinterPower");
        
        
        am.put("PrinterPower", new ArrowAction("PrinterPower"));
        am.put("Power", new ArrowAction("Power"));
        
        am.put("Function", new ArrowAction("Function"));
        am.put("Swap", new ArrowAction("Swap"));
        
        am.put("RightArrow", new ArrowAction("RightArrow"));
        am.put("LeftArrow", new ArrowAction("LeftArrow"));
        am.put("UpArrow", new ArrowAction("UpArrow"));
        am.put("DownArrow", new ArrowAction("DownArrow"));
        
        //
        am.put("Zero", new ArrowAction("Zero"));
        am.put("One", new ArrowAction("One"));
        am.put("Two", new ArrowAction("Two"));
        am.put("Three", new ArrowAction("Three"));
        am.put("Four", new ArrowAction("Four"));
        am.put("Five", new ArrowAction("Five"));
        am.put("Six", new ArrowAction("Six"));
        am.put("Seven", new ArrowAction("Seven"));
        am.put("Eight", new ArrowAction("Eight"));
        am.put("Nine", new ArrowAction("Nine"));
        am.put("#", new ArrowAction("#"));
        am.put("*", new ArrowAction("*"));
        
        //
        
        //
        Title = new javax.swing.JLabel();
        J1357Label = new javax.swing.JLabel();
        JStart1 = new javax.swing.JButton();
        JStart3 = new javax.swing.JButton();
        JStart5 = new javax.swing.JButton();
        JStart7 = new javax.swing.JButton();
        JStartLabel = new javax.swing.JLabel();
        J2468Label1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JButton();
        jToggleButton3 = new javax.swing.JButton();
        jToggleButton5 = new javax.swing.JButton();
        jToggleButton7 = new javax.swing.JButton();
        JEAble = new javax.swing.JLabel();
        JEAble2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JFinish2 = new javax.swing.JButton();
        JFinish4 = new javax.swing.JButton();
        JFinish6 = new javax.swing.JButton();
        JFinish8 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JButton();
        jToggleButton4 = new javax.swing.JButton();
        jToggleButton6 = new javax.swing.JButton();
        jToggleButton8 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPrinterDisplay = new javax.swing.JTextArea();
        jDisplay = new javax.swing.JTextArea();
        jQRFTime = new javax.swing.JLabel();
        
        jNum1 = new javax.swing.JButton();
        jNum2 = new javax.swing.JButton();
        jNum3 = new javax.swing.JButton();
        jNum4 = new javax.swing.JButton();
        jNum5 = new javax.swing.JButton();
        jNum6 = new javax.swing.JButton();
        jNum7 = new javax.swing.JButton();
        jNum8 = new javax.swing.JButton();
        jNum9 = new javax.swing.JButton();
        jNumStar = new javax.swing.JButton();
        jNum0 = new javax.swing.JButton();
        jNumPound = new javax.swing.JButton();
        jFunction = new javax.swing.JButton();
        jSwap = new javax.swing.JButton();
        jChan = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        J2468Label2 = new javax.swing.JLabel();
        J1357Label1 = new javax.swing.JLabel();
        jPower = new javax.swing.JToggleButton();
        jPrinterPwr = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MeFile = new javax.swing.JMenu();
        MeExit = new javax.swing.JMenuItem();
        
        JScrollPane scrollPane = new JScrollPane(jPrinterDisplay);
        scrollPane.setBounds(10,60,780,500);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        
        JScrollPane scrollPane2 = new JScrollPane(jDisplay);
        scrollPane.setBounds(10,60,780,500);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        
        jDisplay.setEditable(false);
        
        jUp = new javax.swing.JButton();
        jLeft = new javax.swing.JButton();
        jRight = new javax.swing.JButton();
        jDown = new javax.swing.JButton();
        
        jCh1 = new javax.swing.JComboBox<>();
        jCh3 = new javax.swing.JComboBox<>();
        jCh5 = new javax.swing.JComboBox<>();
        jCh7 = new javax.swing.JComboBox<>();
        jCh2 = new javax.swing.JComboBox<>();
        jCh4 = new javax.swing.JComboBox<>();
        jCh6 = new javax.swing.JComboBox<>();
        jCh8 = new javax.swing.JComboBox<>();
        
        Num="";
        
        /*shouldnt start a thread right away because there is race to run
        rN = new displayTextUpdater(jDisplay, con);
        tN = new Thread(rN);
        tN.start();*/
        
        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("   CHRONOTIMER 1009");
        Title.setToolTipText("");

        J1357Label.setText("       1                   3                  5                  7");

        JStart1.setText("         ");
        JStart1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JStart1ActionPerformed(evt);
            }
        });

        JStart3.setText("         ");
        JStart3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JStart3ActionPerformed(evt);
            }
        });

        JStart5.setText("         ");
        JStart5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JStart5ActionPerformed(evt);
            }
        });

        JStart7.setText("         ");
        JStart7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JStart7ActionPerformed(evt);
            }
        });

        JStartLabel.setText("Start");

        J2468Label1.setText("       2                   4                  6                  8");

        jToggleButton1.setText("OFF");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("OFF");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton5.setText("OFF");
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });

        jToggleButton7.setText("OFF");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });

        JEAble.setText("Enable/Disable");

        JEAble2.setText("Enable/Disable");

        jLabel3.setText("Finish");

        JFinish2.setText("         ");
        JFinish2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFinish2ActionPerformed(evt);
            }
        });

        JFinish4.setText("         ");
        JFinish4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFinish4ActionPerformed(evt);
            }
        });

        JFinish6.setText("         ");
        JFinish6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFinish6ActionPerformed(evt);
            }
        });

        JFinish8.setText("         ");
        JFinish8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFinish8ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("OFF");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("OFF");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        jToggleButton6.setText("OFF");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });

        jToggleButton8.setText("OFF");
        jToggleButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton8ActionPerformed(evt);
            }
        });

        jPrinterDisplay.setEditable(false);
        jPrinterDisplay.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createCompoundBorder()));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
        );

        jDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jQRFTime.setText("Queue/Running/Final Time");

        jNum1.setText("1");
        jNum1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum1ActionPerformed(evt);
            }
        });

        jNum2.setText("2");
        jNum2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum2ActionPerformed(evt);
            }
        });

        jNum3.setText("3");
        jNum3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum3ActionPerformed(evt);
            }
        });

        jNum4.setText("4");
        jNum4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum4ActionPerformed(evt);
            }
        });

        jNum5.setText("5");
        jNum5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum5ActionPerformed(evt);
            }
        });

        jNum6.setText("6");
        jNum6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum6ActionPerformed(evt);
            }
        });

        jNum7.setText("7");
        jNum7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum7ActionPerformed(evt);
            }
        });

        jNum8.setText("8");
        jNum8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum8ActionPerformed(evt);
            }
        });

        jNum9.setText("9");
        jNum9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum9ActionPerformed(evt);
            }
        });

        jNumStar.setText("*");
        jNumStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNumStarActionPerformed(evt);
            }
        });

        jNum0.setText("0");
        jNum0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNum0ActionPerformed(evt);
            }
        });

        jNumPound.setText("#");
        jNumPound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNumPoundActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jNumStar)
                    .addComponent(jNum7)
                    .addComponent(jNum4)
                    .addComponent(jNum1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jNum2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNum3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jNum5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNum6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jNum8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNum9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jNum0)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNumPound)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNum7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNumStar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNum0, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNumPound, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jFunction.setText("FUNCTION");
        jFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFunctionActionPerformed(evt);
            }
        });

        jSwap.setText("SWAP");
        jSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSwapActionPerformed(evt);
            }
        });

        jChan.setText("CHAN");

        J2468Label2.setText("         2                     4                    6                    8");

        J1357Label1.setText("         1                     3                    5                    7");
        

        jCh1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh1ActionPerformed(evt);
            }
        });

        jCh3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh3ActionPerformed(evt);
            }
        });

        jCh5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh5ActionPerformed(evt);
            }
        });

        jCh7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh7ActionPerformed(evt);
            }
        });

        jCh2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh2ActionPerformed(evt);
            }
        });

        jCh4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh4ActionPerformed(evt);
            }
        });

        jCh6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh6ActionPerformed(evt);
            }
        });

        jCh8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "EYE", "GATE", "PAD" }));
        jCh8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh8ActionPerformed(evt);
            }
        });
        
        
        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(J1357Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(J2468Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    
                    
                    //modify start
                    .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jCh1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCh3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCh5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCh7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jCh2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCh4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCh6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCh8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))	
                    
                    
                	//modify end	
                		
                		
                		)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(J1357Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
               
                //modify start
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCh1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCh3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCh5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCh7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                .addComponent(J2468Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCh2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCh4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCh6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCh8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                
                // modify end
                
               
                
                
                
                .addGap(16, 16, 16))
        );

        jPower.setForeground(new java.awt.Color(255, 0, 0));
        jPower.setText("Power:OFF");
        jPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPowerActionPerformed(evt);
            }
        });

        jPrinterPwr.setForeground(new java.awt.Color(0, 51, 204));
        jPrinterPwr.setText("Printer Pwr:OFF");
        jPrinterPwr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrinterPwrActionPerformed(evt);
            }
        });
        
        jUp.setText("^");
        jUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpActionPerformed(evt);
            }
        });

        jLeft.setText("<");
        jLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLeftActionPerformed(evt);
            }
        });

        jRight.setText(">");
        jRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRightActionPerformed(evt);
            }
        });

        jDown.setText("v");
        jDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDownActionPerformed(evt);
            }
        });
        
        javax.swing.GroupLayout JPanel1Layout = new javax.swing.GroupLayout(JPanel1);
        JPanel1.setLayout(JPanel1Layout);
        JPanel1Layout.setHorizontalGroup(
            JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPower, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(227, 227, 227)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(JPanel1Layout.createSequentialGroup()
                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(JEAble2)
                            .addComponent(JStartLabel)
                            .addComponent(JEAble)))
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSwap)
                            .addComponent(jFunction))))
                .addGap(89, 89, 89)
                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addComponent(J1357Label, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanel1Layout.createSequentialGroup()
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPanel1Layout.createSequentialGroup()
                                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JFinish2)
                                    .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(JPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(JFinish4)
                                        .addGap(18, 18, 18)
                                        .addComponent(JFinish6)
                                        .addGap(18, 18, 18)
                                        .addComponent(JFinish8))
                                    .addGroup(JPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jToggleButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jToggleButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(J2468Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(JPanel1Layout.createSequentialGroup()
                                .addComponent(JStart1)
                                .addGap(18, 18, 18)
                                .addComponent(JStart3)
                                .addGap(18, 18, 18)
                                .addComponent(JStart5)
                                .addGap(18, 18, 18)
                                .addComponent(JStart7))
                            .addGroup(JPanel1Layout.createSequentialGroup()
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jToggleButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18,18, 18)
                                .addComponent(jToggleButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPrinterPwr, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45))))
            .addGroup(JPanel1Layout.createSequentialGroup()
                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addGroup(JPanel1Layout.createParallelGroup()
                		  .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                		.addGroup(JPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jChan))
                        
    //modify start
                        .addGroup(JPanel1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jUp, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(JPanel1Layout.createSequentialGroup()
                                        .addComponent(jLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jDown, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRight, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                		  
                       
    //modify end                  
                        
                        
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        		.addGap(650, 650, 650)
                            .addComponent(jQRFTime)
                            .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );
        JPanel1Layout.setVerticalGroup(
            JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPower, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addComponent(jPrinterPwr, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(J1357Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JStart3)
                            .addComponent(JStart5)
                            .addComponent(JStart7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(JStartLabel)
                                .addComponent(JStart1)))
                        .addGap(4, 4, 4)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButton1)
                            .addComponent(jToggleButton3)
                            .addComponent(jToggleButton5)
                            .addComponent(jToggleButton7)
                            .addComponent(JEAble))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(J2468Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(JFinish2)
                            .addComponent(JFinish4)
                            .addComponent(JFinish6)
                            .addComponent(JFinish8))
                        .addGap(5, 5, 5)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButton2)
                            .addComponent(JEAble2)
                            .addComponent(jToggleButton4)
                            .addComponent(jToggleButton6)
                            .addComponent(jToggleButton8)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel1Layout.createSequentialGroup()
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(JPanel1Layout.createSequentialGroup()
                                .addComponent(jFunction)
                                .addGap(18, 18, 18)
                                .addComponent(jSwap)
                                
 //modify start                           		
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jUp)
                                .addGap(5, 5, 5)
                                .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLeft)
                                    .addComponent(jDown)
                                    .addComponent(jRight))))
                        
 //modify end                       
                        
                        
                        
                        
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(JPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jQRFTime)
                            .addComponent(jChan))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        MeFile.setText("Menu");

        MeExit.setText("Exit");
        MeExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeExitActionPerformed(evt);
            }
        });
        MeFile.add(MeExit);

        jMenuBar1.add(MeFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
               
                .addComponent(JPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }//GEN-END:initComponents

    //Lists of action
    private void MeExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeExitActionPerformed
    	System.out.println("GUI exiting");
    	System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_MeExitActionPerformed


    private void JStart1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JStart1ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(1).Trig();
    	}
    }//GEN-LAST:event_JStart1ActionPerformed

    private void JFinish2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFinish2ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(2).Trig();
    	}
    }//GEN-LAST:event_JFinish2ActionPerformed

    private void JStart3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JStart3ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(3).Trig();
    	}
    }//GEN-LAST:event_JStart3ActionPerformed

    private void JFinish4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFinish4ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(4).Trig();
    	}
    }//GEN-LAST:event_JFinish4ActionPerformed
    
    private void JStart5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JStart5ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(5).Trig();
    	}
    }//GEN-LAST:event_JStart5ActionPerformed

    private void JFinish6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFinish6ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(6).Trig();
    	}
    }//GEN-LAST:event_JFinish6ActionPerformed

    private void JStart7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JStart7ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(7).Trig();
    	}
    }//GEN-LAST:event_JStart7ActionPerformed

    private void JFinish8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFinish8ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.getChannels().getCh(8).Trig();
    	}
    }//GEN-LAST:event_JFinish8ActionPerformed

    //we want to display the current num generated into the display
    private void jNum1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum1ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){//can only read from numpad if active
    			 if(!timeGet && !PARDNFFlag){
    			 	//Num+="1";
    			 	con.addToNum("1");
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			else if(PARDNFFlag){
    				 con.DNF(1);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
					 runningDisplay.execute();
    			}
    		 	else{
    			 if(count1 < 2){
    					con.addToNum("1");
    					//Num+="1";
    					count1++;
    					if(count1 ==2){
    						if(count2 == 2){
    							con.addToNum(".");
    							count1--;//can only add 1 more num
    							count2++;//cant add anything else
    						}
    						else if(count2 < 2){
    							con.addToNum(":");
    							count1 = 0;
    							count2++;
    						}
    					}
    					jDisplay.setText("Time: " + con.getNum());
    				}
    		 	}
    		 }
         }
    }//GEN-LAST:event_jNum1ActionPerformed

    private void jNum2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum2ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 	con.addToNum("2");
    			 	//Num+="2";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			else if(PARDNFFlag){
    				 con.DNF(2);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    			else{
    	    		 if(count1 < 2){
    	    			con.addToNum("2");
    	    			//Num+="1";
    	    			count1++;
    	    			if(count1 ==2){
    	    				if(count2 == 2){
    	    					con.addToNum(".");
    	    					count1--;//can only add 1 more num
    	    					count2++;//cant add anything else
    	    				}
    	    				else if(count2 < 2){
    	    					con.addToNum(":");
    	    					count1 = 0;
    	    					count2++;
    	    				}
    	    			}
    	    			jDisplay.setText("Time: " + con.getNum());
    	    		}
    			}
    		 }
         }
    }//GEN-LAST:event_jNum2ActionPerformed

    private void jNum3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum3ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 con.addToNum("3");
    				// Num+="3";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			else if(PARDNFFlag){
    				 con.DNF(2);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    			else{
    	    		 if(count1 < 2){
    	    			con.addToNum("3");
    	    			//Num+="1";
    	    			count1++;
    	    			if(count1 ==2){
    	    				if(count2 == 2){
    	    					con.addToNum(".");
    	    					count1--;//can only add 1 more num
    	    					count2++;//cant add anything else
    	    				}
    	    				else if(count2 < 2){
    	    					con.addToNum(":");
    	    					count1 = 0;
    	    					count2++;
    	    				}
    	    			}
    	    			jDisplay.setText("Time: " + con.getNum());
    	    		}
    			}
    		 }
         }
    }//GEN-LAST:event_jNum3ActionPerformed

    private void jNum4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum4ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 	con.addToNum("4");
    			 	//Num+="4";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			else if(PARDNFFlag){
    				 con.DNF(4);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				// ((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    			else{
    	    			 if(count1 < 2){
    	    					con.addToNum("4");
    	    					//Num+="1";
    	    					count1++;
    	    					if(count1 ==2){
    	    						if(count2 == 2){
    	    							con.addToNum(".");
    	    							count1--;//can only add 1 more num
    	    							count2++;//cant add anything else
    	    						}
    	    						else if(count2 < 2){
    	    							con.addToNum(":");
    	    							count1 = 0;
    	    							count2++;
    	    						}
    	    					}
    	    					jDisplay.setText("Time: " + con.getNum());
    	    				}
    	    		 	}
    		 }
         }
    }//GEN-LAST:event_jNum4ActionPerformed

    private void jNum5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum5ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 	con.addToNum("5");
    			 	//Num+="5";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			else if(PARDNFFlag){
    				 con.DNF(5);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    				else{
    	    			 if(count1 < 2){
    	    					con.addToNum("5");
    	    					//Num+="1";
    	    					count1++;
    	    					if(count1 ==2){
    	    						if(count2 == 2){
    	    							con.addToNum(".");
    	    							count1--;//can only add 1 more num
    	    							count2++;//cant add anything else
    	    						}
    	    						else if(count2 < 2){
    	    							con.addToNum(":");
    	    							count1 = 0;
    	    							count2++;
    	    						}
    	    					}
    	    					jDisplay.setText("Time: " + con.getNum());
    	    				}
    	    		 	}
    		 }
         }
    }//GEN-LAST:event_jNum5ActionPerformed

    private void jNum6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum6ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 	con.addToNum("6");
    			 	//Num+="6";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			 else if(PARDNFFlag){
    				 con.DNF(6);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    				else{
    	    			 if(count1 < 2){
    	    					con.addToNum("6");
    	    					//Num+="1";
    	    					count1++;
    	    					if(count1 ==2){
    	    						if(count2 == 2){
    	    							con.addToNum(".");
    	    							count1--;//can only add 1 more num
    	    							count2++;//cant add anything else
    	    						}
    	    						else if(count2 < 2){
    	    							con.addToNum(":");
    	    							count1 = 0;
    	    							count2++;
    	    						}
    	    					}
    	    					jDisplay.setText("Time: " + con.getNum());
    	    				}
    	    		 	}
    		 }
         }
    }//GEN-LAST:event_jNum6ActionPerformed

    private void jNum7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum7ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 	con.addToNum("7");
    			 	//Num+="7";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			 else if(PARDNFFlag){
    				 con.DNF(7);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    				else{
    	    			 if(count1 < 2){
    	    					con.addToNum("7");
    	    					//Num+="1";
    	    					count1++;
    	    					if(count1 ==2){
    	    						if(count2 == 2){
    	    							con.addToNum(".");
    	    							count1--;//can only add 1 more num
    	    							count2++;//cant add anything else
    	    						}
    	    						else if(count2 < 2){
    	    							con.addToNum(":");
    	    							count1 = 0;
    	    							count2++;
    	    						}
    	    					}
    	    					jDisplay.setText("Time: " + con.getNum());
    	    				}
    	    		 	}
    		 }
    	}
    }//GEN-LAST:event_jNum7ActionPerformed

    private void jNum8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum8ActionPerformed
    	 if(con.onCheck()){
    		 if(con.isNumpadActive()){
    			 if(!timeGet && !PARDNFFlag){
    			 	con.addToNum("8");
    			 	//Num+="8";
     				jDisplay.setText("Num: " + con.getNum());
    		 	}
    			 else if(PARDNFFlag){
    				 con.DNF(8);
    				 PARDNFFlag = false;
    				 con.deactivateNumpad();//numpad was active
    				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
    				 con.closeMenu();//menu was open
    				 runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    			}
    				else{
    	    			 if(count1 < 2){
    	    					con.addToNum("8");
    	    					//Num+="1";
    	    					count1++;
    	    					if(count1 ==2){
    	    						if(count2 == 2){
    	    							con.addToNum(".");
    	    							count1--;//can only add 1 more num
    	    							count2++;//cant add anything else
    	    						}
    	    						else if(count2 < 2){
    	    							con.addToNum(":");
    	    							count1 = 0;
    	    							count2++;
    	    						}
    	    					}
    	    					jDisplay.setText("Time: " + con.getNum());
    	    				}
    	    		 	}
    		 }
         }
    }//GEN-LAST:event_jNum8ActionPerformed

    private void jNum9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum9ActionPerformed
        if(con.onCheck()){
        	if(con.isNumpadActive()){
        		if(!timeGet && !PARDNFFlag){
        			con.addToNum("9");
   					//Num+="9";
    				jDisplay.setText("Num: " + con.getNum());
        		}
        		else if(PARDNFFlag){//should be invalid no such lane
   				 con.DNF(9);
   				 PARDNFFlag = false;
   				 con.deactivateNumpad();//numpad was active
   				// ((displayTextUpdater)rN).ExitInterrupt();//race was happening
   				 con.closeMenu();//menu was open
   				runningDisplay = new RunningDisplayTask();
				runningDisplay.execute();
        		}
        		else{
       			 if(count1 < 2){
       					con.addToNum("9");
       					//Num+="1";
       					count1++;
       					if(count1 ==2){
       						if(count2 == 2){
       							con.addToNum(".");
       							count1--;//can only add 1 more num
       							count2++;//cant add anything else
       						}
       						else if(count2 < 2){
       							con.addToNum(":");
       							count1 = 0;
       							count2++;
       						}
       					}
       					jDisplay.setText("Time: " + con.getNum());
       				}
       		 	}
        	}
        }
    }//GEN-LAST:event_jNum9ActionPerformed

    private void jNumStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNumStarActionPerformed
    	if(con.powerState==true){
    		if(!timeGet){
    			con.getChannels().getCh(1).Trig();//another shorthand for trig 1
    		}
        }
    }//GEN-LAST:event_jNumStarActionPerformed

    private void jNum0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNum0ActionPerformed
        if(con.onCheck()){
        	if(con.isNumpadActive()){
        		if(!timeGet && !PARDNFFlag){
        			con.addToNum("0");
   			 		//Num+="0";
    				jDisplay.setText("Num: " + con.getNum());
   		 		}
        		else if(PARDNFFlag){//should be invalid no such lane
   				 con.DNF(0);
   				 PARDNFFlag = false;
   				 con.deactivateNumpad();//numpad was active
   				 //((displayTextUpdater)rN).ExitInterrupt();//race was happening
   				 con.closeMenu();//menu was open
   				runningDisplay = new RunningDisplayTask();
				runningDisplay.execute();
        		}
        		else{
       			 if(count1 < 2){
       					con.addToNum("0");
       					//Num+="1";
       					count1++;
       					if(count1 ==2){
       						if(count2 == 2){
       							con.addToNum(".");
       							count1--;//can only add 1 more num
       							count2++;//cant add anything else
       						}
       						else if(count2 < 2){
       							con.addToNum(":");
       							count1 = 0;
       							count2++;
       						}
       					}
       					jDisplay.setText("Time: " + con.getNum());
       				}
       		 	}
        	}
        }
    }//GEN-LAST:event_jNum0ActionPerformed

    private void jNumPoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNumPoundActionPerformed
        //the first time the button is pressed it will start reading a number
    	if(con.onCheck()){
    		if(con.getDisplayState()){
    			if(!DNFFlag){
    				if(!con.isNumpadActive()){//if numpad inactive turn it on
    					con.activateNumpad();
    				}
    				else{
    					con.deactivateNumpad();
    				}
    				if(con.isNumpadActive()){
    					//tN.interrupt();//it might be inactive so nothing to interrupt //but ensure we do incase display list is shown 
    					runningDisplay.cancel(true);
    					if(con.isMenuOn()){
    						con.closeMenu();
    					}
    					//Num = "";
    					con.clearNum();
    					jDisplay.setText("Num: ");
    				}
    				else{
							//int id = Integer.parseInt(Num); // turning power off should reset this function
							if(!con.getNum().equals("")){
								int id = Integer.parseInt(con.getNum());
								con.Num(id); 
								con.clearNum();
							}
							//((displayTextUpdater) rN).ExitInterrupt();//else if we came from display list exit the interrupt cycle
							runningDisplay = new RunningDisplayTask();
							runningDisplay.execute();
							con.deactivateNumpad();//turn numpad off
						}
    			}
    		
    			else{
    					if(!con.getNum().equals("")){
    						int id = Integer.parseInt(con.getNum()); // turning power off should reset this function
    						con.DNF(id); 
    						con.clearNum();
    						DNFFlag = false;
    					}
    					//((displayTextUpdater) rN).ExitInterrupt();//else if we came from display list exit the interrupt cycle
    					jDisplay.setText(con.getLastMenu());//we want to stay in DNF menu in case multiple dnfs
    					con.deactivateNumpad();
    			}
    		}
    		else{//if no run is currently on then we can change the time
    			if(timeGet){
    					timeGet=false;
    					//ensure Num is in the right format
    					if(con.validifyTime(con.getNum())){
    						con.Time(con.getNum());
    					}
    					con.clearNum();
    					count1=0;
    					count2=0;
    					jDisplay.setText(con.getLastMenu());//last operable menu spot
    					con.deactivateNumpad();
    			}
    		}
    			
    	}

    }//GEN-LAST:event_jNumPoundActionPerformed
    
    private void jFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFunctionActionPerformed
    	if(con.onCheck()){
    		con.clearNum();//if num had value reset/clear it
    		con.deactivateNumpad();//in case numpad was activated that way it wont interfere by accident
    		if(con.getDisplayState()){//if display list exists
    			if(!con.isMenuOn()){
    				runningDisplay.cancel(true);
    				con.openMenu();
    				jDisplay.setText(con.getMenu());
    			}
    			else{
    				if(con.getMenu().equals("dnf")){
    					DNFFlag = false;//set dnf flag false else interferes with numpad actions
    					PARDNFFlag = false;
    					con.closeMenu();
    					con.openMenu();
    					jDisplay.setText(con.getMenu());
    				}
    				else if(con.getMenu().equals("time")){
    					timeGet = false;//similarly if we just exited time change turn of the flag so numpad no interrupted
    					con.closeMenu();
    					con.openMenu();
    					jDisplay.setText(con.getMenu());
    				}
    				else{
    					con.closeMenu();
    					runningDisplay = new RunningDisplayTask();
    					runningDisplay.execute();
    				}
    			}
    		}
    		else{//start menu over
    			if(con.getMenu().equals("time")){
					timeGet = false;//similarly if we just exited time change turn of the flag so numpad no interrupted
					con.closeMenu();
					con.openMenu();
					jDisplay.setText(con.getMenu());
					count1=0;
					count2=0;
				}
    			else if(con.isMenuOn()){
    				con.closeMenu();
    			}
    			con.openMenu();
    			jDisplay.setText(con.getMenu());
    		}
    	//else stay in menu as nothing else to display
    	}
    }//GEN-LAST:event_jFunctionActionPerformed
    

    private void jCh1ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    	if(jCh1.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(1).isSensor()==true)
    		{
    			con.getChannels().getCh(1).removeSens();
    
    		}
    		con.getChannels().getCh(1).connect("EYE");
    		jToggleButton1.setText("ON");
    		
    	}
    	else if(jCh1.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(1).isSensor()==true)
    		{
    			con.getChannels().getCh(1).removeSens();
    	
    			
    			
    		}
    		
    		con.getChannels().getCh(1).connect("GATE");
    		jToggleButton1.setText("ON");
    		
    	}
    	else if(jCh1.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(1).isSensor()==true)
    		{
    			con.getChannels().getCh(1).removeSens();
    			
    		}
    		con.getChannels().getCh(1).connect("PAD");
    		jToggleButton1.setText("ON");
    		
    	}
    	else if(jCh1.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(1).isSensor()==true)
    		{
    			//con.getChannels().getCh(1).removeSens();
    			con.Disconnect(1);
    			jToggleButton1.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh1, "No sensor was armed");
    		}
    		
    		
    	}
    	
    	
    	
    }                                    

    private void jCh3ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh3.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(3).isSensor()==true)
    		{
    			con.getChannels().getCh(3).removeSens();
    		
    		
    		}
    		con.getChannels().getCh(3).connect("EYE");
    		jToggleButton3.setText("ON");
    		
    	}
    	else if(jCh3.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(3).isSensor()==true)
    		{
    			con.getChannels().getCh(3).removeSens();
    	
    			
    		}
    		con.getChannels().getCh(3).connect("GATE");
    		jToggleButton3.setText("ON");
    		
    		
    	}
    	else if(jCh3.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(3).isSensor()==true)
    		{
    			con.getChannels().getCh(3).removeSens();
    	
    			
    		}
    		
    		con.getChannels().getCh(3).connect("PAD");
    		jToggleButton3.setText("ON");
    		
    	}
    	else if(jCh3.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(3).isSensor()==true)
    		{
    			//con.getChannels().getCh(3).removeSens();
    			con.Disconnect(3);
    			jToggleButton3.setText("OFF");
    		}	
    		else
    		{
    			JOptionPane.showMessageDialog(jCh3, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                                    

    private void jCh5ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh5.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(5).isSensor()==true)
    		{
    			con.getChannels().getCh(5).removeSens();
    	
    			
    		}
    		con.getChannels().getCh(5).connect("EYE");
    		jToggleButton5.setText("ON");
    		
    	}
    	else if(jCh5.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(5).isSensor()==true)
    		{
    			con.getChannels().getCh(5).removeSens();

    		}
    		con.getChannels().getCh(5).connect("GATE");
    		jToggleButton5.setText("ON");
    	}
    	else if(jCh5.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(5).isSensor()==true)
    		{
    			con.getChannels().getCh(5).removeSens();
    	
    			
    		}
    		con.getChannels().getCh(5).connect("PAD");
    		jToggleButton5.setText("ON");
    	}
    	else if(jCh5.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(5).isSensor()==true)
    		{
    			//con.getChannels().getCh(5).removeSens();
    			con.Disconnect(5);
    			jToggleButton5.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh5, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                                    

    private void jCh7ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh7.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(7).isSensor()==true)
    		{
    			con.getChannels().getCh(7).removeSens();
    	
    			
    		}
    		con.getChannels().getCh(7).connect("EYE");
    		jToggleButton7.setText("ON");
    	}
    	else if(jCh7.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(7).isSensor()==true)
    		{
    			con.getChannels().getCh(7).removeSens();

    		}
    		con.getChannels().getCh(7).connect("GATE");
    		jToggleButton7.setText("ON");
    		
    	}
    	else if(jCh7.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(7).isSensor()==true)
    		{
    			con.getChannels().getCh(7).removeSens();

    		}
    		con.getChannels().getCh(7).connect("PAD");
    		jToggleButton7.setText("ON");
    	}
    	else if(jCh7.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(7).isSensor()==true)
    		{
    			//con.getChannels().getCh(7).removeSens();
    			con.Disconnect(7);
    			jToggleButton7.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh7, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                                    

    private void jCh2ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh2.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(2).isSensor()==true)
    		{
    			con.getChannels().getCh(2).removeSens();
    	
    		
    		}
    		con.getChannels().getCh(2).connect("EYE");
    		jToggleButton2.setText("ON");
    	}
    	else if(jCh2.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(2).isSensor()==true)
    		{
    			con.getChannels().getCh(2).removeSens();
    	
    			
    		}
    		con.getChannels().getCh(2).connect("GATE");
    		jToggleButton2.setText("ON");
    	}
    	else if(jCh2.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(2).isSensor()==true)
    		{
    			con.getChannels().getCh(2).removeSens();
    	
    			
    		}
    		con.getChannels().getCh(2).connect("PAD");
    		jToggleButton2.setText("ON");
    	}
    	else if(jCh2.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(2).isSensor()==true)
    		{
    			//con.getChannels().getCh(2).removeSens();
    			con.Disconnect(2);
    			jToggleButton2.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh2, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                                    

    private void jCh4ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh4.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(4).isSensor()==true)
    		{
    			con.getChannels().getCh(4).removeSens();

    			
    		}
    		con.getChannels().getCh(4).connect("EYE");
    		jToggleButton4.setText("ON");
    	}
    	else if(jCh4.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(4).isSensor()==true)
    		{
    			con.getChannels().getCh(4).removeSens();

    			
    		}
    		con.getChannels().getCh(4).connect("GATE");
    		jToggleButton4.setText("ON");
    	}
    	else if(jCh4.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(4).isSensor()==true)
    		{
    			con.getChannels().getCh(4).removeSens();

    			
    		}
    		con.getChannels().getCh(4).connect("PAD");
    		jToggleButton4.setText("ON");
    	}
    	else if(jCh4.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(4).isSensor()==true)
    		{
    			//con.getChannels().getCh(4).removeSens();
    			con.Disconnect(4);
    			jToggleButton4.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh4, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                                    

    private void jCh6ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh6.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(6).isSensor()==true)
    		{
    			con.getChannels().getCh(6).removeSens();
	
    		}
    		con.getChannels().getCh(6).connect("EYE");
    		jToggleButton6.setText("ON");
    	}
    	else if(jCh6.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(6).isSensor()==true)
    		{
    			con.getChannels().getCh(6).removeSens();

    		}
    		con.getChannels().getCh(6).connect("GATE");
    		jToggleButton6.setText("ON");
    	}
    	else if(jCh6.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(6).isSensor()==true)
    		{
    			con.getChannels().getCh(6).removeSens();

    		}
    		con.getChannels().getCh(6).connect("PAD");
    		jToggleButton6.setText("ON");
    	}
    	else if(jCh6.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(6).isSensor()==true)
    		{
    			//con.getChannels().getCh(6).removeSens();
    			con.Disconnect(6);
    			jToggleButton6.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh6, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                                    

    private void jCh8ActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
       	if(jCh8.getSelectedItem().equals("EYE"))
    	{
    		if(con.getChannels().getCh(8).isSensor()==true)
    		{
    			con.getChannels().getCh(8).removeSens();
 
    			
    		}
    		con.getChannels().getCh(8).connect("EYE");
    		jToggleButton8.setText("ON");
    	}
    	else if(jCh8.getSelectedItem().equals("GATE"))
    	{
    		if(con.getChannels().getCh(8).isSensor()==true)
    		{
    			con.getChannels().getCh(8).removeSens();

    			
    		}
    		con.getChannels().getCh(8).connect("GATE");
    		jToggleButton8.setText("ON");
    	}
    	else if(jCh8.getSelectedItem().equals("PAD"))
    	{
    		if(con.getChannels().getCh(8).isSensor()==true)
    		{
    			con.getChannels().getCh(8).removeSens();

    		}
    		con.getChannels().getCh(8).connect("PAD");
    		jToggleButton8.setText("ON");
    	}
    	else if(jCh8.getSelectedItem().equals("None"))
    	{
    		if(con.getChannels().getCh(8).isSensor()==true)
    		{
    			//con.getChannels().getCh(8).removeSens();
    			con.Disconnect(8);
    			jToggleButton8.setText("OFF");
    		}
    		else
    		{
    			JOptionPane.showMessageDialog(jCh8, "No sensor was armed");
    		}
    		
    		
    	}
    	
    }                  
    
    
    private void jUpActionPerformed(java.awt.event.ActionEvent evt) {   
    	if(con.onCheck()){
    		if(con.isMenuOn()){
    			con.menuUP();
    			jDisplay.setText(con.getMenu());
    		}
    	}
        // TODO add your handling code here:
    }  
    private void jDownActionPerformed(java.awt.event.ActionEvent evt) { 
    	if(con.onCheck()){
    		if(con.isMenuOn()){
    			con.menuDOWN();
    			jDisplay.setText(con.getMenu());
    		}
    	}
        // TODO add your handling code here:
    }  
    
    private void jRightActionPerformed(java.awt.event.ActionEvent evt) {     
    	if(con.onCheck()){
    		if(con.isMenuOn()){
    			//String currentState = con.getMenu();
    			con.menuRIGHT();
    			String currentState = con.getLastMenu();
    			String nextState = con.getMenu();
    			String x;
    			switch(nextState){
    				case("print"):
    					if(con.printerOnCheck()){
    						jPrinterDisplay.setText(con.Print());
    					}
    					else{
    						jDisplay.setText(currentState +"\n\n\nThe printer is off");
    					}
    					break;
    				case("export"):
    					if(con.getDisplayState()){//a run is currently ongoing
    						try {
    							con.export();
    						} catch (IOException e) {
    							// TODO Auto-generated catch block
    							e.printStackTrace();
    						}
    					}
    					else{
    						jDisplay.setText(currentState+ "\n\n\nNo Current Event");
    					}
    					break;
    				case("ind"):
    					x = con.Event("IND");
    					jDisplay.setText(currentState + "\n\n\n" + x);
    					break;
    				case("parind"):
    					x = con.Event("PARIND");
						jDisplay.setText(currentState + "\n\n\n" + x);
    					break;
    				case("grp"):
    					x = con.Event("GRP");
						jDisplay.setText(currentState + "\n\n\n" + x);
    					break;
    				case("paragrp"):
    					jDisplay.setText(currentState + "\n\n\nUNAVAILABLE");
    					break;
    				case("dnf"):
    					if(con.getRaceType().equals("GRP")){
    						con.clearNum();
    	    				jDisplay.setText("Num: ");
    						DNFFlag = true;
    						con.activateNumpad();
    						//press pound first
    						//menu not closed can still be referenced
    					}
    					else if(con.getRaceType().equals("PARIND")){//also for PARGRP
    						PARDNFFlag=true;
    						con.activateNumpad();
    						jDisplay.setText("Enter the Lane #");
    					}
    					else{
    						x = con.DNF();
    						if(con.getDisplayState()){//go to run Screen
    							con.closeMenu();
    							runningDisplay = new RunningDisplayTask();
    							runningDisplay.execute();
    						}
    						else{
    							jDisplay.setText(currentState + "\n\n\n" + x);
    						}
    					}
    					break;
    				case("cancel"):
    					x = con.Cancel();
    					if(con.getDisplayState()){//go to Run screen
    						con.closeMenu();
    						runningDisplay = new RunningDisplayTask();
							runningDisplay.execute();
    					}
    					else{
    						jDisplay.setText(currentState + "\n\n\n" + x);
    					}
    					break;
    				case("newrun"):
    					x = con.newRun();//will turn on displayState /therefore a thread can be started
    					if(x.equals("")){
    						con.closeMenu();
    						//rN = new displayTextUpdater(jDisplay, con);
    						//tN = new Thread(rN);
    						//tN.start();
    						runningDisplay = new RunningDisplayTask();
    						runningDisplay.execute();
    					}
    					else{
    						jDisplay.setText(currentState + "\n\n\n" + x);
    					}
    					break;
    				case("endrun"):
    					x = con.endRun();
    					if(con.getDisplayState()){//display list must bre true because a run is on
    						/*will close displayState so we can wait for it to exit
    						((displayTextUpdater) rN).ExitInterrupt();//exit interrupt from menu
    						try {
    							tN.join();//join displayList thread
    						} catch (InterruptedException e) {
    							e.printStackTrace();
    						}*///already ended the task
    					}
    					jDisplay.setText(currentState + "\n\n\n" + x);
    					break;
    				case("time"):
    					//must press num to enter num;
    					//press num again finish entering
    					if(!con.getDisplayState()){//can only change time if there is not current run
    						timeGet = true;//we are taking time
    						jDisplay.setText("Enter a time in format xx:xx:xx.xx\npress # when done to set time");//press # to enter time
    						//Num = "";
    						con.clearNum();
    						con.activateNumpad();
    						count1 = 0;
    						count2 = 0;
    						//con.closeMenu();
    					}
    					else{
    						jDisplay.setText(currentState + "\n\n\nCan't change timer during an event");
    					}
    					break;
    				case("exit"):
    					if(con.getDisplayState()){//if a list can be displayed display it
    						con.closeMenu();
    						runningDisplay = new RunningDisplayTask();
							runningDisplay.execute();
    					}
    					//else stay here
    					break;
    				case("reset"):
    					con.closeMenu();
    					con.Reset();
    					//if(con.getDisplayState()){//exit race thread if was present
    						/*((displayTextUpdater) rN).ExitInterrupt();//exit interrupt from menu
    						try {
    							tN.join();//join displayList thread
    						} catch (InterruptedException e) {
    							e.printStackTrace();
    						}*///already ended task
    					//}
    					PowerOFFUpdate();
    					jPrinterDisplay.setText("");
    					jPrinterPwr.setText("Printer Pwr: OFF");
    					jDisplay.setText(con.getMenu());
    					break;
    				default:
    					jDisplay.setText(nextState);
    					break;
    			}
    		}
    	}
        // TODO add your handling code here:
    }  
    
    private void jLeftActionPerformed(java.awt.event.ActionEvent evt) {   
    	if(con.onCheck()){
    		if(con.isMenuOn()){
    			String prevState = con.getMenu();
    			PARDNFFlag = false;//in case they were on DNF should come back to RaceOperations<
    			DNFFlag = false;
    			con.deactivateNumpad();//could have been on with DNFFlags 
    			if(prevState.equals("time")){
    				timeGet = false;
    				count1 = 0;
    				count2 = 0;
    				jDisplay.setText(con.getLastMenu());
    			}
    			con.menuLEFT();
    			String nextState = con.getMenu();
    			if(nextState.equals("exit")){
    				if(con.getDisplayState()){//if list to be displayed is available display it
    					con.closeMenu();
    					//((displayTextUpdater) rN).ExitInterrupt();
    					runningDisplay = new RunningDisplayTask();
						runningDisplay.execute();
    				}
    				//else stay here
    			}
    			else{
    				jDisplay.setText(nextState);
    			}
    		}
    	}
        // TODO add your handling code here:
    }  

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(1);
    		if(con.isConnected(1)){
    			jToggleButton1.setText("ON");
    		}
    		else{
    			jToggleButton1.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton1ActionPerformed

        
    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
                // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(2);
    		if(con.isConnected(2)){
    			jToggleButton2.setText("ON");
    		}
    		else{
    			jToggleButton2.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    
    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(3);
    		if(con.isConnected(3)){
    			jToggleButton3.setText("ON");
    		}
    		else{
    			jToggleButton3.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(4);
    		if(con.isConnected(4)){
    			jToggleButton4.setText("ON");
    		}
    		else{
    			jToggleButton4.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    
    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(5);
    		if(con.isConnected(5)){
    			jToggleButton5.setText("ON");
    		}
    		else{
    			jToggleButton5.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(6);
    		if(con.isConnected(6)){
    			jToggleButton6.setText("ON");
    		}
    		else{
    			jToggleButton6.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(7);
    		if(con.isConnected(7)){
    			jToggleButton7.setText("ON");
    		}
    		else{
    			jToggleButton7.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton8ActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    		con.Tog(8);
    		if(con.isConnected(8)){
    			jToggleButton8.setText("ON");
    		}
    		else{
    			jToggleButton8.setText("OFF");
    		}
    	}
    }//GEN-LAST:event_jToggleButton8ActionPerformed

    private void PowerOFFUpdate()
    {
    	jToggleButton1.setText("OFF");
    	jToggleButton2.setText("OFF");
    	jToggleButton3.setText("OFF");
    	jToggleButton4.setText("OFF");
    	jToggleButton5.setText("OFF");
    	jToggleButton6.setText("OFF");
    	jToggleButton7.setText("OFF");
    	jToggleButton8.setText("OFF");
    	jDisplay.setText("");
    	if(con.printerOnCheck()){
    		con.printerPower();//turn off
    		jPrinterPwr.setText("Printer Pwr:OFF");
        	jPrinterDisplay.setText("");
    	}
    	
    }
    
    private void jPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPowerActionPerformed
        // TODO add your handling code here:
    	
    	if(jPower.isSelected())
        {
            jPower.setText("Power:ON");
            con.Power();
            jDisplay.setText(con.getMenu());//first thing to see is the menu
        }
        else
        {
            jPower.setText("Power:OFF");
            PowerOFFUpdate();
            numSwitch = false;//reset numpad reading
            boolean displayWasOn = con.getDisplayState(); 
            con.Power();
            if(displayWasOn){//make sure to end thread if was on 
            	runningDisplay.cancel(true);
            	/*((displayTextUpdater) rN).ExitInterrupt();
            	try {
					tN.join();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/
            }
        }
    	
    }//GEN-LAST:event_jPowerActionPerformed

    private void jPrinterPwrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrinterPwrActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	if(!con.printerOnCheck())//if printer off turn it on
        {
            jPrinterPwr.setText("Printer Pwr:ON");
            con.printerPower();
        }
        else
        {
            jPrinterPwr.setText("Printer Pwr:OFF");
            con.printerPower();
            jPrinterDisplay.setText("");
        }
    	}
    }//GEN-LAST:event_jPrinterPwrActionPerformed

   

    private void jSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSwapActionPerformed
        // TODO add your handling code here:
    	if(con.powerState==true){
    	con.Swap();	
    	}
    }//GEN-LAST:event_jSwapActionPerformed

 


    public class ArrowAction extends AbstractAction {

        private String cmd;

        public ArrowAction(String cmd) {
            this.cmd = cmd;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (cmd.equalsIgnoreCase("LeftArrow")) 
            {
               jLeft.doClick();
            } else if (cmd.equalsIgnoreCase("RightArrow")) 
            {
                jRight.doClick();
            } else if (cmd.equalsIgnoreCase("UpArrow")) 
            {
                jUp.doClick();
            } else if (cmd.equalsIgnoreCase("DownArrow")) 
            {
               jDown.doClick();
            }
            else if (cmd.equalsIgnoreCase("Zero"))
            {
            	jNum0.doClick();
            }
            else if (cmd.equalsIgnoreCase("One"))
            {
            	jNum1.doClick();
            }
            else if (cmd.equalsIgnoreCase("Two"))
            {
            	jNum2.doClick();
            }
            else if (cmd.equalsIgnoreCase("Three"))
            {
            	jNum3.doClick();
            }
            else if (cmd.equalsIgnoreCase("Four"))
            {
            	jNum4.doClick();
            }
            else if (cmd.equalsIgnoreCase("Five"))
            {
            	jNum5.doClick();
            }
            else if (cmd.equalsIgnoreCase("Six"))
            {
            	jNum6.doClick();
            }
            else if (cmd.equalsIgnoreCase("Seven"))
            {
            	jNum7.doClick();
            }
            else if (cmd.equalsIgnoreCase("Eight"))
            {
            	jNum8.doClick();
            }
            else if (cmd.equalsIgnoreCase("Nine"))
            {
            	jNum9.doClick();
            }
            else if (cmd.equalsIgnoreCase("#"))
            {
            	jNumPound.doClick();
            }
            else if (cmd.equalsIgnoreCase("*"))
            {
            	jNumStar.doClick();
            }
            else if (cmd.equalsIgnoreCase("Function"))
            {
            	jFunction.doClick();
            }
            else if (cmd.equalsIgnoreCase("Swap"))
            {
            	jSwap.doClick();
            }
            else if (cmd.equalsIgnoreCase("Power"))
            {
            	jPower.doClick();
            }
            else if(cmd.equalsIgnoreCase("PrinterPower"))
            {
            	jPrinterPwr.doClick();
            }
        }

		
    }
    
    

private class RunningDisplayTask extends SwingWorker<Void, String> {

	@Override
	protected Void doInBackground() throws Exception {
		while(!isCancelled()){
			publish(con.DisplayListString());
		}
		// TODO Auto-generated method stub
		return null;
	}
	
	protected void process(List<String> toPrint){
		if(!isCancelled()){
			String toDisplay = toPrint.get(toPrint.size() -1);
			jDisplay.setText(toDisplay);
		}
	}
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel J1357Label;
    private javax.swing.JLabel J1357Label1;
    private javax.swing.JLabel J2468Label1;
    private javax.swing.JLabel J2468Label2;
    private javax.swing.JLabel JEAble;
    private javax.swing.JLabel JEAble2;
    private javax.swing.JButton JFinish2;
    private javax.swing.JButton JFinish4;
    private javax.swing.JButton JFinish6;
    private javax.swing.JButton JFinish8;
    private javax.swing.JPanel JPanel1;
    private javax.swing.JButton JStart1;
    private javax.swing.JButton JStart3;
    private javax.swing.JButton JStart5;
    private javax.swing.JButton JStart7;
    private javax.swing.JLabel JStartLabel;
    private javax.swing.JMenuItem MeExit;
    private javax.swing.JMenu MeFile;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel jChan;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private JTextArea jDisplay;
    private javax.swing.JButton jFunction;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton jNum0;
    private javax.swing.JButton jNum1;
    private javax.swing.JButton jNum2;
    private javax.swing.JButton jNum3;
    private javax.swing.JButton jNum4;
    private javax.swing.JButton jNum5;
    private javax.swing.JButton jNum6;
    private javax.swing.JButton jNum7;
    private javax.swing.JButton jNum8;
    private javax.swing.JButton jNum9;
    private javax.swing.JButton jNumPound;
    private javax.swing.JButton jNumStar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JToggleButton jPower;
    private JTextArea jPrinterDisplay;
    private javax.swing.JButton jPrinterPwr;
    private javax.swing.JLabel jQRFTime;
    private javax.swing.JButton jSwap;
    private javax.swing.JButton jToggleButton1;
    private javax.swing.JButton jToggleButton2;
    private javax.swing.JButton jToggleButton3;
    private javax.swing.JButton jToggleButton4;
    private javax.swing.JButton jToggleButton5;
    private javax.swing.JButton jToggleButton6;
    private javax.swing.JButton jToggleButton7;
    private javax.swing.JButton jToggleButton8;
    private javax.swing.JButton jUp;
    private javax.swing.JButton jDown;
    private javax.swing.JButton jRight;
    private javax.swing.JButton jLeft;
    private String Num;
    private javax.swing.JComboBox<String> jCh1;
    private javax.swing.JComboBox<String> jCh2;
    private javax.swing.JComboBox<String> jCh3;
    private javax.swing.JComboBox<String> jCh4;
    private javax.swing.JComboBox<String> jCh5;
    private javax.swing.JComboBox<String> jCh6;
    private javax.swing.JComboBox<String> jCh7;
    private javax.swing.JComboBox<String> jCh8;
    
    
    // End of variables declaration//GEN-END:variables
}
